/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";
export const SPEC_VERSION = "1.0.0"; 
/**
 * User Schema
 */
export interface User {
  userId: string;
  firstName: string;
  lastName: string;
  email: string;
  mobile: string;
  password: string;
  userName?: string;
  location: string;
  status: string;
  verified: boolean;
  productType: string;
  dateCreated: string;
  dateUpdated?: string;
}

/**
 * Comment Schema
 */
export interface Comment {
  commentId: string;
  reviewId: string;
  userId: string;
  productId: string;
  content: string;
  dateCreated: string;
}

/**
 * Product Schema
 */
export interface Product {
  productId: string;
  userId: string;
  category: string;
  title: string;
  quantity: number;
  marketValue: number;
  barterValue?: number;
  imageUrls: ImageUrl[];
  rating: number;
  reviews?: Review[];
  dateCreated: string;
  dateUpdated: string;
}

/**
 * Order Schema
 */
export interface Order {
  orderId: string;
  userId: string;
  products: Product[];
  totalValue: string;
  status: string;
  dateCreated: string;
  dateCanceled: string;
  dateBartered: string;
}

/**
 * Review Schema
 */
export interface Review {
  reviewId: string;
  userId: string;
  productId: string;
  content: string;
  comments?: Comment[];
  dateCreated: string;
}

/**
 * Image Url Schema
 */
export type ImageUrl = string;

export type GetUsersProps = Omit<GetProps<User[], void, void, void>, "path">;

/**
 * retrieves users from DB
 * 
 * By passing in the appropriate options, you can search for registered users in the system
 */
export const GetUsers = (props: GetUsersProps) => (
  <Get<User[], void, void, void>
    path={`/users`}
    
    {...props}
  />
);

export type UseGetUsersProps = Omit<UseGetProps<User[], void, void, void>, "path">;

/**
 * retrieves users from DB
 * 
 * By passing in the appropriate options, you can search for registered users in the system
 */
export const useGetUsers = (props: UseGetUsersProps) => useGet<User[], void, void, void>(`/users`, props);


export type CreateUserProps = Omit<MutateProps<void, void, void, User, void>, "path" | "verb">;

/**
 * creates a new user
 * 
 * Adds a new user to the DB
 */
export const CreateUser = (props: CreateUserProps) => (
  <Mutate<void, void, void, User, void>
    verb="POST"
    path={`/users`}
    
    {...props}
  />
);

export type UseCreateUserProps = Omit<UseMutateProps<void, void, void, User, void>, "path" | "verb">;

/**
 * creates a new user
 * 
 * Adds a new user to the DB
 */
export const useCreateUser = (props: UseCreateUserProps) => useMutate<void, void, void, User, void>("POST", `/users`, props);


export interface GetUserResponse {[key: string]: any}

export type GetUserProps = Omit<GetProps<GetUserResponse, void, void, void>, "path">;

/**
 * retrieves specific user by ID
 * 
 * get specific user by user ID
 */
export const GetUser = (props: GetUserProps) => (
  <Get<GetUserResponse, void, void, void>
    path={`/users/:userId`}
    
    {...props}
  />
);

export type UseGetUserProps = Omit<UseGetProps<GetUserResponse, void, void, void>, "path">;

/**
 * retrieves specific user by ID
 * 
 * get specific user by user ID
 */
export const useGetUser = (props: UseGetUserProps) => useGet<GetUserResponse, void, void, void>(`/users/:userId`, props);


export type UpdateUserProps = Omit<MutateProps<void, void, void, User, void>, "path" | "verb">;

/**
 * updates status of a specific user
 * 
 * Updates status of a specific user
 */
export const UpdateUser = (props: UpdateUserProps) => (
  <Mutate<void, void, void, User, void>
    verb="PATCH"
    path={`/users/:userId`}
    
    {...props}
  />
);

export type UseUpdateUserProps = Omit<UseMutateProps<void, void, void, User, void>, "path" | "verb">;

/**
 * updates status of a specific user
 * 
 * Updates status of a specific user
 */
export const useUpdateUser = (props: UseUpdateUserProps) => useMutate<void, void, void, User, void>("PATCH", `/users/:userId`, props);


export type DeleteUserProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * delete record of a specific user
 * 
 * Delete record of a specific user
 */
export const DeleteUser = (props: DeleteUserProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/users/:userId`}
    
    {...props}
  />
);

export type UseDeleteUserProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * delete record of a specific user
 * 
 * Delete record of a specific user
 */
export const useDeleteUser = (props: UseDeleteUserProps) => useMutate<void, void, void, void, void>("DELETE", `/users/:userId`, {   ...props });


export type GetProductsProps = Omit<GetProps<Product[], void, void, void>, "path">;

/**
 * retrieves products from DB
 * 
 * Get a list of all products in DB
 */
export const GetProducts = (props: GetProductsProps) => (
  <Get<Product[], void, void, void>
    path={`/products`}
    
    {...props}
  />
);

export type UseGetProductsProps = Omit<UseGetProps<Product[], void, void, void>, "path">;

/**
 * retrieves products from DB
 * 
 * Get a list of all products in DB
 */
export const useGetProducts = (props: UseGetProductsProps) => useGet<Product[], void, void, void>(`/products`, props);


export type CreateProductProps = Omit<MutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * creates a new product
 * 
 * Adds a new product to the DB
 */
export const CreateProduct = (props: CreateProductProps) => (
  <Mutate<void, void, void, Product, void>
    verb="POST"
    path={`/products`}
    
    {...props}
  />
);

export type UseCreateProductProps = Omit<UseMutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * creates a new product
 * 
 * Adds a new product to the DB
 */
export const useCreateProduct = (props: UseCreateProductProps) => useMutate<void, void, void, Product, void>("POST", `/products`, props);


export type GetProductProps = Omit<GetProps<Product[], void, void, void>, "path">;

/**
 * retrieves a specific product from DB
 * 
 * Retrieves a specific product
 */
export const GetProduct = (props: GetProductProps) => (
  <Get<Product[], void, void, void>
    path={`/products/:productId`}
    
    {...props}
  />
);

export type UseGetProductProps = Omit<UseGetProps<Product[], void, void, void>, "path">;

/**
 * retrieves a specific product from DB
 * 
 * Retrieves a specific product
 */
export const useGetProduct = (props: UseGetProductProps) => useGet<Product[], void, void, void>(`/products/:productId`, props);


export type UpdateProductProps = Omit<MutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * updates status of a specific product
 * 
 * Updates status of a specific product
 */
export const UpdateProduct = (props: UpdateProductProps) => (
  <Mutate<void, void, void, Product, void>
    verb="PATCH"
    path={`/products/:productId`}
    
    {...props}
  />
);

export type UseUpdateProductProps = Omit<UseMutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * updates status of a specific product
 * 
 * Updates status of a specific product
 */
export const useUpdateProduct = (props: UseUpdateProductProps) => useMutate<void, void, void, Product, void>("PATCH", `/products/:productId`, props);


export type DeleteProductProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific product
 * 
 * Deletes record of a specific product
 */
export const DeleteProduct = (props: DeleteProductProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/products/:productId`}
    
    {...props}
  />
);

export type UseDeleteProductProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific product
 * 
 * Deletes record of a specific product
 */
export const useDeleteProduct = (props: UseDeleteProductProps) => useMutate<void, void, void, void, void>("DELETE", `/products/:productId`, {   ...props });


export type GetOrdersProps = Omit<GetProps<Order[], void, void, void>, "path">;

/**
 * retrieves orders from DB
 * 
 * Get a list of all orders in DB
 */
export const GetOrders = (props: GetOrdersProps) => (
  <Get<Order[], void, void, void>
    path={`/orders`}
    
    {...props}
  />
);

export type UseGetOrdersProps = Omit<UseGetProps<Order[], void, void, void>, "path">;

/**
 * retrieves orders from DB
 * 
 * Get a list of all orders in DB
 */
export const useGetOrders = (props: UseGetOrdersProps) => useGet<Order[], void, void, void>(`/orders`, props);


export type CreateOrderProps = Omit<MutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * creates a new order
 * 
 * Creates a new order from a set of products in the DB
 */
export const CreateOrder = (props: CreateOrderProps) => (
  <Mutate<void, void, void, Product, void>
    verb="POST"
    path={`/orders`}
    
    {...props}
  />
);

export type UseCreateOrderProps = Omit<UseMutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * creates a new order
 * 
 * Creates a new order from a set of products in the DB
 */
export const useCreateOrder = (props: UseCreateOrderProps) => useMutate<void, void, void, Product, void>("POST", `/orders`, props);


export type GetOrderProps = Omit<GetProps<Order[], void, void, void>, "path">;

/**
 * retrieves a specific order from DB
 * 
 * Get a specific order from DB
 */
export const GetOrder = (props: GetOrderProps) => (
  <Get<Order[], void, void, void>
    path={`/orders/:orderId`}
    
    {...props}
  />
);

export type UseGetOrderProps = Omit<UseGetProps<Order[], void, void, void>, "path">;

/**
 * retrieves a specific order from DB
 * 
 * Get a specific order from DB
 */
export const useGetOrder = (props: UseGetOrderProps) => useGet<Order[], void, void, void>(`/orders/:orderId`, props);


export type UpdateOrderProps = Omit<MutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * updates status of a specific order
 * 
 * Creates status of a specific order
 */
export const UpdateOrder = (props: UpdateOrderProps) => (
  <Mutate<void, void, void, Product, void>
    verb="PATCH"
    path={`/orders/:orderId`}
    
    {...props}
  />
);

export type UseUpdateOrderProps = Omit<UseMutateProps<void, void, void, Product, void>, "path" | "verb">;

/**
 * updates status of a specific order
 * 
 * Creates status of a specific order
 */
export const useUpdateOrder = (props: UseUpdateOrderProps) => useMutate<void, void, void, Product, void>("PATCH", `/orders/:orderId`, props);


export type DeleteOrderProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific order
 * 
 * Delete a specific order
 */
export const DeleteOrder = (props: DeleteOrderProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/orders/:orderId`}
    
    {...props}
  />
);

export type UseDeleteOrderProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific order
 * 
 * Delete a specific order
 */
export const useDeleteOrder = (props: UseDeleteOrderProps) => useMutate<void, void, void, void, void>("DELETE", `/orders/:orderId`, {   ...props });


export type GetAllReviewsProps = Omit<GetProps<Review[], void, void, void>, "path">;

/**
 * retrieves all reviews from DB
 * 
 * Get a list of all reviews in DB
 */
export const GetAllReviews = (props: GetAllReviewsProps) => (
  <Get<Review[], void, void, void>
    path={`/reviews`}
    
    {...props}
  />
);

export type UseGetAllReviewsProps = Omit<UseGetProps<Review[], void, void, void>, "path">;

/**
 * retrieves all reviews from DB
 * 
 * Get a list of all reviews in DB
 */
export const useGetAllReviews = (props: UseGetAllReviewsProps) => useGet<Review[], void, void, void>(`/reviews`, props);


export type DeleteAllReviewsProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes all reviews
 * 
 * Delete all reviews in DB
 */
export const DeleteAllReviews = (props: DeleteAllReviewsProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/reviews`}
    
    {...props}
  />
);

export type UseDeleteAllReviewsProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes all reviews
 * 
 * Delete all reviews in DB
 */
export const useDeleteAllReviews = (props: UseDeleteAllReviewsProps) => useMutate<void, void, void, void, void>("DELETE", `/reviews`, {   ...props });


export type GetReviewsByProductIdProps = Omit<GetProps<Review[], void, void, void>, "path">;

/**
 * retrieves all reviews for a specific product
 * 
 * Get reviews for a specific product from DB
 */
export const GetReviewsByProductId = (props: GetReviewsByProductIdProps) => (
  <Get<Review[], void, void, void>
    path={`/reviews/:productId`}
    
    {...props}
  />
);

export type UseGetReviewsByProductIdProps = Omit<UseGetProps<Review[], void, void, void>, "path">;

/**
 * retrieves all reviews for a specific product
 * 
 * Get reviews for a specific product from DB
 */
export const useGetReviewsByProductId = (props: UseGetReviewsByProductIdProps) => useGet<Review[], void, void, void>(`/reviews/:productId`, props);


export type CreateReviewProps = Omit<MutateProps<void, void, void, Review, void>, "path" | "verb">;

/**
 * creates a new review on a specific product
 * 
 * Creates a new review on a specific product
 */
export const CreateReview = (props: CreateReviewProps) => (
  <Mutate<void, void, void, Review, void>
    verb="POST"
    path={`/reviews/:productId`}
    
    {...props}
  />
);

export type UseCreateReviewProps = Omit<UseMutateProps<void, void, void, Review, void>, "path" | "verb">;

/**
 * creates a new review on a specific product
 * 
 * Creates a new review on a specific product
 */
export const useCreateReview = (props: UseCreateReviewProps) => useMutate<void, void, void, Review, void>("POST", `/reviews/:productId`, props);


export type DeleteAllReviewsByProductIdProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes all reviews of a specific product
 * 
 * Delete all reviews of a specific product in DB
 */
export const DeleteAllReviewsByProductId = (props: DeleteAllReviewsByProductIdProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/reviews/:productId`}
    
    {...props}
  />
);

export type UseDeleteAllReviewsByProductIdProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes all reviews of a specific product
 * 
 * Delete all reviews of a specific product in DB
 */
export const useDeleteAllReviewsByProductId = (props: UseDeleteAllReviewsByProductIdProps) => useMutate<void, void, void, void, void>("DELETE", `/reviews/:productId`, {   ...props });


export interface GetReviewResponse {[key: string]: any}

export type GetReviewProps = Omit<GetProps<GetReviewResponse, void, void, void>, "path">;

/**
 * retrieves a specific review for a specific product
 * 
 * Get a specific review for a specific product from DB
 */
export const GetReview = (props: GetReviewProps) => (
  <Get<GetReviewResponse, void, void, void>
    path={`/reviews/:productId/:reviewId`}
    
    {...props}
  />
);

export type UseGetReviewProps = Omit<UseGetProps<GetReviewResponse, void, void, void>, "path">;

/**
 * retrieves a specific review for a specific product
 * 
 * Get a specific review for a specific product from DB
 */
export const useGetReview = (props: UseGetReviewProps) => useGet<GetReviewResponse, void, void, void>(`/reviews/:productId/:reviewId`, props);


export type UpdateReviewProps = Omit<MutateProps<void, void, void, Review, void>, "path" | "verb">;

/**
 * updates a specific review
 * 
 * Updates a specific review
 */
export const UpdateReview = (props: UpdateReviewProps) => (
  <Mutate<void, void, void, Review, void>
    verb="PATCH"
    path={`/reviews/:productId/:reviewId`}
    
    {...props}
  />
);

export type UseUpdateReviewProps = Omit<UseMutateProps<void, void, void, Review, void>, "path" | "verb">;

/**
 * updates a specific review
 * 
 * Updates a specific review
 */
export const useUpdateReview = (props: UseUpdateReviewProps) => useMutate<void, void, void, Review, void>("PATCH", `/reviews/:productId/:reviewId`, props);


export type DeleteReviewProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific review
 * 
 * Delete a specific review
 */
export const DeleteReview = (props: DeleteReviewProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/reviews/:productId/:reviewId`}
    
    {...props}
  />
);

export type UseDeleteReviewProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific review
 * 
 * Delete a specific review
 */
export const useDeleteReview = (props: UseDeleteReviewProps) => useMutate<void, void, void, void, void>("DELETE", `/reviews/:productId/:reviewId`, {   ...props });


export type GetCommentsByReviewIdProps = Omit<GetProps<Comment[], void, void, void>, "path">;

/**
 * retrieves all comments for a specific review
 * 
 * Get comments for a specific review
 */
export const GetCommentsByReviewId = (props: GetCommentsByReviewIdProps) => (
  <Get<Comment[], void, void, void>
    path={`/comments/:reviewId`}
    
    {...props}
  />
);

export type UseGetCommentsByReviewIdProps = Omit<UseGetProps<Comment[], void, void, void>, "path">;

/**
 * retrieves all comments for a specific review
 * 
 * Get comments for a specific review
 */
export const useGetCommentsByReviewId = (props: UseGetCommentsByReviewIdProps) => useGet<Comment[], void, void, void>(`/comments/:reviewId`, props);


export type CreateCommentProps = Omit<MutateProps<void, void, void, Comment, void>, "path" | "verb">;

/**
 * creates a new comment on a specific review
 * 
 * Creates a new comment on a specific review
 */
export const CreateComment = (props: CreateCommentProps) => (
  <Mutate<void, void, void, Comment, void>
    verb="POST"
    path={`/comments/:reviewId`}
    
    {...props}
  />
);

export type UseCreateCommentProps = Omit<UseMutateProps<void, void, void, Comment, void>, "path" | "verb">;

/**
 * creates a new comment on a specific review
 * 
 * Creates a new comment on a specific review
 */
export const useCreateComment = (props: UseCreateCommentProps) => useMutate<void, void, void, Comment, void>("POST", `/comments/:reviewId`, props);


export type DeleteAllCommentsByReviewIdProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes all comments on a specific review
 * 
 * Delete all comments on a specific review
 */
export const DeleteAllCommentsByReviewId = (props: DeleteAllCommentsByReviewIdProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/comments/:reviewId`}
    
    {...props}
  />
);

export type UseDeleteAllCommentsByReviewIdProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes all comments on a specific review
 * 
 * Delete all comments on a specific review
 */
export const useDeleteAllCommentsByReviewId = (props: UseDeleteAllCommentsByReviewIdProps) => useMutate<void, void, void, void, void>("DELETE", `/comments/:reviewId`, {   ...props });


export interface GetCommentByReviewIdResponse {[key: string]: any}

export type GetCommentByReviewIdProps = Omit<GetProps<GetCommentByReviewIdResponse, void, void, void>, "path">;

/**
 * retrieves a specific comment for a specific review
 * 
 * Get a specific comment for a specific review
 */
export const GetCommentByReviewId = (props: GetCommentByReviewIdProps) => (
  <Get<GetCommentByReviewIdResponse, void, void, void>
    path={`/comments/:reviewId/:commentId`}
    
    {...props}
  />
);

export type UseGetCommentByReviewIdProps = Omit<UseGetProps<GetCommentByReviewIdResponse, void, void, void>, "path">;

/**
 * retrieves a specific comment for a specific review
 * 
 * Get a specific comment for a specific review
 */
export const useGetCommentByReviewId = (props: UseGetCommentByReviewIdProps) => useGet<GetCommentByReviewIdResponse, void, void, void>(`/comments/:reviewId/:commentId`, props);


export type UpdateCommentProps = Omit<MutateProps<void, void, void, Comment, void>, "path" | "verb">;

/**
 * updates a specific comment
 * 
 * Updates a specific comment
 */
export const UpdateComment = (props: UpdateCommentProps) => (
  <Mutate<void, void, void, Comment, void>
    verb="PATCH"
    path={`/comments/:reviewId/:commentId`}
    
    {...props}
  />
);

export type UseUpdateCommentProps = Omit<UseMutateProps<void, void, void, Comment, void>, "path" | "verb">;

/**
 * updates a specific comment
 * 
 * Updates a specific comment
 */
export const useUpdateComment = (props: UseUpdateCommentProps) => useMutate<void, void, void, Comment, void>("PATCH", `/comments/:reviewId/:commentId`, props);


export type DeleteCommentProps = Omit<MutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific comment
 * 
 * Delete a specific comment
 */
export const DeleteComment = (props: DeleteCommentProps) => (
  <Mutate<void, void, void, void, void>
    verb="DELETE"
    path={`/comments/:reviewId/:commentId`}
    
    {...props}
  />
);

export type UseDeleteCommentProps = Omit<UseMutateProps<void, void, void, void, void>, "path" | "verb">;

/**
 * deletes a specific comment
 * 
 * Delete a specific comment
 */
export const useDeleteComment = (props: UseDeleteCommentProps) => useMutate<void, void, void, void, void>("DELETE", `/comments/:reviewId/:commentId`, {   ...props });

