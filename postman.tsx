/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps, Mutate, MutateProps, useMutate, UseMutateProps } from "restful-react";

type Require<T,R extends keyof T> = T & Required<Pick<T, R>>;
export const SPEC_VERSION = "1.0"; 
/**
 * filter comparison operators
 */
export type FilterOps = "eq" | "lte" | "gte" | "lt" | "gt" | "in";

export interface FilterSpec {
  /**
   * the type of filter
   */
  filter?: string;
  /**
   * the value to match
   */
  value?: string;
  /**
   * filter comparison operators
   */
  op?: "eq" | "lte" | "gte" | "lt" | "gt" | "in";
}

export interface SuccessResponse {
  status?: StatusOk;
}

/**
 * Api call success
 */
export type StatusOk = string;

/**
 * Payload returning an entity
 */
export interface EntityResponse {
  /**
   * Object's entity
   */
  entity?: {[key: string]: any};
}

/**
 * Payload returning a list of entities
 */
export type EntitiesResponse = EntityResponse[];

export interface EntityIdResponse {
  /**
   * Object's ID
   */
  id?: string;
}

export interface Email {
  /**
   * Email Address
   */
  email: string;
}

export interface Password {
  /**
   * Password
   */
  password: string;
}

export interface UserID {
  /**
   * User ID
   */
  user_id: string;
}

export type User = Email & UserID;

export interface UserTokens {
  /**
   * User's api calls token
   */
  token: string;
  /**
   * User's refresh token
   */
  refresh_token: string;
}

export type UserSignup = AccessRole & Credentials;

export type UserUpdate = User & AccessRole;

export type UserLoginResponse = UserTokens & User;

export interface AccessRole {
  /**
   * Access role of user
   */
  access_role?: "admin" | "basic";
}

export type Credentials = Password & Email;

/**
 * Subcategory
 */
export type Subcategory = string;

export interface Category {
  /**
   * Category Name
   */
  name: string;
}

export type Categories = Category[];

export type ListSubcategories = Subcategory[];

export interface Subcategories {
  subcategories?: Subcategory[];
}

export type AddCategory = Category & Subcategories;

export interface UpdateCategory {
  /**
   * Old Category Name
   */
  old_category_name: string;
  /**
   * New Category Name
   */
  new_category_name: string;
}

export type UpdateSubCategory = Require<Category, "old_subcategory_name" | "new_subcategory_name">;

/**
 * Question
 */
export type Question = string;

export type AddQuestion = Require<Category | Subcategories, "question" | "category">;

export interface UpdateQuestion {
  question: Question;
  /**
   * Question ID
   */
  question_id: string;
  /**
   * Must be included in the question set or not
   */
  must?: boolean;
}

/**
 * Questions data type
 */
export type Questions = UpdateQuestion[];

export interface JobID {
  /**
   * Job ID
   */
  job_id?: string;
}

/**
 * Keywords used to generate questions for job
 */
export interface JobKeywords {
  keywords?: string[];
}

/**
 * Job data type
 */
export interface Job {
  title: string;
  description: string;
  requirements: string;
}

/**
 * Job data type
 */
export type UpdateJob = {
  title?: string;
  description?: string;
  requirements?: string;
};

/**
 * Job data type
 */
export type JobResponse = JobID & Job & JobKeywords;

export interface Jobs {
  jobs?: FilterSpec[];
}

export type UsersV1EndpointsDeleteAccountProps = Omit<MutateProps<EntityIdResponse, unknown, void, string, void>, "path" | "verb">;

/**
 * Deletes a user's account
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     email-invalid, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const UsersV1EndpointsDeleteAccount = (props: UsersV1EndpointsDeleteAccountProps) => (
  <Mutate<EntityIdResponse, unknown, void, string, void>
    verb="DELETE"
    path={`/iq/users/v1`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsDeleteAccountProps = Omit<UseMutateProps<EntityIdResponse, unknown, void, string, void>, "path" | "verb">;

/**
 * Deletes a user's account
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     email-invalid, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useUsersV1EndpointsDeleteAccount = (props: UseUsersV1EndpointsDeleteAccountProps) => useMutate<EntityIdResponse, unknown, void, string, void>("DELETE", `/iq/users/v1`, {   ...props });


export interface UsersV1EndpointsForgottenPasswordPathParams {
  user_email: string
}

export type UsersV1EndpointsForgottenPasswordProps = Omit<GetProps<SuccessResponse, unknown, void, UsersV1EndpointsForgottenPasswordPathParams>, "path"> & UsersV1EndpointsForgottenPasswordPathParams;

/**
 * Forgotten Password
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 * 
 */
export const UsersV1EndpointsForgottenPassword = ({user_email, ...props}: UsersV1EndpointsForgottenPasswordProps) => (
  <Get<SuccessResponse, unknown, void, UsersV1EndpointsForgottenPasswordPathParams>
    path={`/iq/users/v1/password/${user_email}`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsForgottenPasswordProps = Omit<UseGetProps<SuccessResponse, unknown, void, UsersV1EndpointsForgottenPasswordPathParams>, "path"> & UsersV1EndpointsForgottenPasswordPathParams;

/**
 * Forgotten Password
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 * 
 */
export const useUsersV1EndpointsForgottenPassword = ({user_email, ...props}: UseUsersV1EndpointsForgottenPasswordProps) => useGet<SuccessResponse, unknown, void, UsersV1EndpointsForgottenPasswordPathParams>((paramsInPath: UsersV1EndpointsForgottenPasswordPathParams) => `/iq/users/v1/password/${paramsInPath.user_email}`, {  pathParams: { user_email }, ...props });


export interface UsersV1EndpointsChangePasswordPathParams {
  token: string
}

export type UsersV1EndpointsChangePasswordProps = Omit<MutateProps<SuccessResponse, unknown, void, Password, UsersV1EndpointsChangePasswordPathParams>, "path" | "verb"> & UsersV1EndpointsChangePasswordPathParams;

/**
 * Change Password
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     token-invalid, 401
 *     authorization-required, 401
 *     password-invalid, 400
 * 
 */
export const UsersV1EndpointsChangePassword = ({token, ...props}: UsersV1EndpointsChangePasswordProps) => (
  <Mutate<SuccessResponse, unknown, void, Password, UsersV1EndpointsChangePasswordPathParams>
    verb="PUT"
    path={`/iq/users/v1/password/${token}`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsChangePasswordProps = Omit<UseMutateProps<SuccessResponse, unknown, void, Password, UsersV1EndpointsChangePasswordPathParams>, "path" | "verb"> & UsersV1EndpointsChangePasswordPathParams;

/**
 * Change Password
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     token-invalid, 401
 *     authorization-required, 401
 *     password-invalid, 400
 * 
 */
export const useUsersV1EndpointsChangePassword = ({token, ...props}: UseUsersV1EndpointsChangePasswordProps) => useMutate<SuccessResponse, unknown, void, Password, UsersV1EndpointsChangePasswordPathParams>("PUT", (paramsInPath: UsersV1EndpointsChangePasswordPathParams) => `/iq/users/v1/password/${paramsInPath.token}`, {  pathParams: { token }, ...props });


export type UsersV1EndpointsSignupProps = Omit<MutateProps<SuccessResponse, unknown, void, UserSignup, void>, "path" | "verb">;

/**
 * Signup up a new user
 * 
 * 
 * Errors:
 * 
 *     password-invalid, 400
 *     email-invalid, 406
 *     user-already-exists, 400
 *     verification-email-not-sent 500
 * 
 */
export const UsersV1EndpointsSignup = (props: UsersV1EndpointsSignupProps) => (
  <Mutate<SuccessResponse, unknown, void, UserSignup, void>
    verb="POST"
    path={`/iq/users/v1/signup`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsSignupProps = Omit<UseMutateProps<SuccessResponse, unknown, void, UserSignup, void>, "path" | "verb">;

/**
 * Signup up a new user
 * 
 * 
 * Errors:
 * 
 *     password-invalid, 400
 *     email-invalid, 406
 *     user-already-exists, 400
 *     verification-email-not-sent 500
 * 
 */
export const useUsersV1EndpointsSignup = (props: UseUsersV1EndpointsSignupProps) => useMutate<SuccessResponse, unknown, void, UserSignup, void>("POST", `/iq/users/v1/signup`, props);


export type UsersV1EndpointsLoginProps = Omit<MutateProps<UserLoginResponse, unknown, void, Credentials, void>, "path" | "verb">;

/**
 * Login with user's credentials
 * 
 * 
 * Errors:
 * 
 *     not-found, 404
 *     user-already-logged-in, 400
 *     password-invalid, 400
 *     email-invalid, 400
 *     email-unverified, 400
 * 
 */
export const UsersV1EndpointsLogin = (props: UsersV1EndpointsLoginProps) => (
  <Mutate<UserLoginResponse, unknown, void, Credentials, void>
    verb="POST"
    path={`/iq/users/v1/login`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsLoginProps = Omit<UseMutateProps<UserLoginResponse, unknown, void, Credentials, void>, "path" | "verb">;

/**
 * Login with user's credentials
 * 
 * 
 * Errors:
 * 
 *     not-found, 404
 *     user-already-logged-in, 400
 *     password-invalid, 400
 *     email-invalid, 400
 *     email-unverified, 400
 * 
 */
export const useUsersV1EndpointsLogin = (props: UseUsersV1EndpointsLoginProps) => useMutate<UserLoginResponse, unknown, void, Credentials, void>("POST", `/iq/users/v1/login`, props);


export type UsersV1EndpointsLogoutProps = Omit<MutateProps<SuccessResponse, unknown, void, void, void>, "path" | "verb">;

/**
 * Logout
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     user-already-logged-in, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const UsersV1EndpointsLogout = (props: UsersV1EndpointsLogoutProps) => (
  <Mutate<SuccessResponse, unknown, void, void, void>
    verb="POST"
    path={`/iq/users/v1/logout`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsLogoutProps = Omit<UseMutateProps<SuccessResponse, unknown, void, void, void>, "path" | "verb">;

/**
 * Logout
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     user-already-logged-in, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useUsersV1EndpointsLogout = (props: UseUsersV1EndpointsLogoutProps) => useMutate<SuccessResponse, unknown, void, void, void>("POST", `/iq/users/v1/logout`, props);


export interface UsersV1EndpointsEmailVerificationQueryParams {
  /**
   * Email verification token generated at sign-up time
   */
  email_verification_token: string;
}

export type UsersV1EndpointsEmailVerificationProps = Omit<GetProps<void, unknown, UsersV1EndpointsEmailVerificationQueryParams, void>, "path">;

/**
 * Verifies user's email
 * 
 * 
 * Endpoint called from a link in the email sent to a user for email verification.
 * Errors:
 * 
 *     not-found, 404
 *     authorisation-required, 401
 * 
 */
export const UsersV1EndpointsEmailVerification = (props: UsersV1EndpointsEmailVerificationProps) => (
  <Get<void, unknown, UsersV1EndpointsEmailVerificationQueryParams, void>
    path={`/iq/users/v1/email_verification`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsEmailVerificationProps = Omit<UseGetProps<void, unknown, UsersV1EndpointsEmailVerificationQueryParams, void>, "path">;

/**
 * Verifies user's email
 * 
 * 
 * Endpoint called from a link in the email sent to a user for email verification.
 * Errors:
 * 
 *     not-found, 404
 *     authorisation-required, 401
 * 
 */
export const useUsersV1EndpointsEmailVerification = (props: UseUsersV1EndpointsEmailVerificationProps) => useGet<void, unknown, UsersV1EndpointsEmailVerificationQueryParams, void>(`/iq/users/v1/email_verification`, props);


export interface UsersV1EndpointsGenerateNewTokensQueryParams {
  /**
   * The old access token of the user
   */
  old_access_token: string;
}

export type UsersV1EndpointsGenerateNewTokensProps = Omit<GetProps<UserTokens & UserID, unknown, UsersV1EndpointsGenerateNewTokensQueryParams, void>, "path">;

/**
 * Generates new user access and refresh tokens
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 *     Bearer Valid Basic Refresh token
 * 
 * Errors:
 * 
 *   'token-invalid', 401
 *   'authorisation-required', 401
 *   'user-not-found', 404
 * 
 */
export const UsersV1EndpointsGenerateNewTokens = (props: UsersV1EndpointsGenerateNewTokensProps) => (
  <Get<UserTokens & UserID, unknown, UsersV1EndpointsGenerateNewTokensQueryParams, void>
    path={`/iq/users/v1/generate_tokens`}
    
    {...props}
  />
);

export type UseUsersV1EndpointsGenerateNewTokensProps = Omit<UseGetProps<UserTokens & UserID, unknown, UsersV1EndpointsGenerateNewTokensQueryParams, void>, "path">;

/**
 * Generates new user access and refresh tokens
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 *     Bearer Valid Basic Refresh token
 * 
 * Errors:
 * 
 *   'token-invalid', 401
 *   'authorisation-required', 401
 *   'user-not-found', 404
 * 
 */
export const useUsersV1EndpointsGenerateNewTokens = (props: UseUsersV1EndpointsGenerateNewTokensProps) => useGet<UserTokens & UserID, unknown, UsersV1EndpointsGenerateNewTokensQueryParams, void>(`/iq/users/v1/generate_tokens`, props);


export type CategoriesV1EndpointsListCategoriesProps = Omit<GetProps<Categories, unknown, void, void>, "path">;

/**
 * List categories
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const CategoriesV1EndpointsListCategories = (props: CategoriesV1EndpointsListCategoriesProps) => (
  <Get<Categories, unknown, void, void>
    path={`/iq/categories/v1/`}
    
    {...props}
  />
);

export type UseCategoriesV1EndpointsListCategoriesProps = Omit<UseGetProps<Categories, unknown, void, void>, "path">;

/**
 * List categories
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useCategoriesV1EndpointsListCategories = (props: UseCategoriesV1EndpointsListCategoriesProps) => useGet<Categories, unknown, void, void>(`/iq/categories/v1/`, props);


export type CategoriesV1EndpointsAddCategoryProps = Omit<MutateProps<AddCategory, unknown, void, AddCategory, void>, "path" | "verb">;

/**
 * Add a new question category and optional list of subcategories
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     token-invalid, 401
 *     authorization-required, 401
 *     category-already-exists, 400
 * 
 */
export const CategoriesV1EndpointsAddCategory = (props: CategoriesV1EndpointsAddCategoryProps) => (
  <Mutate<AddCategory, unknown, void, AddCategory, void>
    verb="POST"
    path={`/iq/categories/v1/`}
    
    {...props}
  />
);

export type UseCategoriesV1EndpointsAddCategoryProps = Omit<UseMutateProps<AddCategory, unknown, void, AddCategory, void>, "path" | "verb">;

/**
 * Add a new question category and optional list of subcategories
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     token-invalid, 401
 *     authorization-required, 401
 *     category-already-exists, 400
 * 
 */
export const useCategoriesV1EndpointsAddCategory = (props: UseCategoriesV1EndpointsAddCategoryProps) => useMutate<AddCategory, unknown, void, AddCategory, void>("POST", `/iq/categories/v1/`, props);


export type CategoriesV1EndpointsUpdateCategoryProps = Omit<MutateProps<AddCategory, unknown, void, UpdateCategory, void>, "path" | "verb">;

/**
 * Update a question category’s name
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     token-invalid, 401
 *     authorization-required, 401
 *     category-already-exists, 400
 * 
 */
export const CategoriesV1EndpointsUpdateCategory = (props: CategoriesV1EndpointsUpdateCategoryProps) => (
  <Mutate<AddCategory, unknown, void, UpdateCategory, void>
    verb="PUT"
    path={`/iq/categories/v1/`}
    
    {...props}
  />
);

export type UseCategoriesV1EndpointsUpdateCategoryProps = Omit<UseMutateProps<AddCategory, unknown, void, UpdateCategory, void>, "path" | "verb">;

/**
 * Update a question category’s name
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     token-invalid, 401
 *     authorization-required, 401
 *     category-already-exists, 400
 * 
 */
export const useCategoriesV1EndpointsUpdateCategory = (props: UseCategoriesV1EndpointsUpdateCategoryProps) => useMutate<AddCategory, unknown, void, UpdateCategory, void>("PUT", `/iq/categories/v1/`, props);


export interface CategoriesV1EndpointsDeleteCategoryQueryParams {
  keep_questions?: boolean;
}

export type CategoriesV1EndpointsDeleteCategoryProps = Omit<MutateProps<SuccessResponse, unknown, CategoriesV1EndpointsDeleteCategoryQueryParams, string, void>, "path" | "verb">;

/**
 * Delete a question category
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const CategoriesV1EndpointsDeleteCategory = (props: CategoriesV1EndpointsDeleteCategoryProps) => (
  <Mutate<SuccessResponse, unknown, CategoriesV1EndpointsDeleteCategoryQueryParams, string, void>
    verb="DELETE"
    path={`/iq/categories/v1`}
    
    {...props}
  />
);

export type UseCategoriesV1EndpointsDeleteCategoryProps = Omit<UseMutateProps<SuccessResponse, unknown, CategoriesV1EndpointsDeleteCategoryQueryParams, string, void>, "path" | "verb">;

/**
 * Delete a question category
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useCategoriesV1EndpointsDeleteCategory = (props: UseCategoriesV1EndpointsDeleteCategoryProps) => useMutate<SuccessResponse, unknown, CategoriesV1EndpointsDeleteCategoryQueryParams, string, void>("DELETE", `/iq/categories/v1`, {   ...props });


export type CategoriesV1EndpointsAddSubcategoriesProps = Omit<MutateProps<AddCategory, unknown, void, AddCategory, void>, "path" | "verb">;

/**
 * Add new subcategories to a category
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401    
 * 
 */
export const CategoriesV1EndpointsAddSubcategories = (props: CategoriesV1EndpointsAddSubcategoriesProps) => (
  <Mutate<AddCategory, unknown, void, AddCategory, void>
    verb="POST"
    path={`/iq/categories/v1/subcategories`}
    
    {...props}
  />
);

export type UseCategoriesV1EndpointsAddSubcategoriesProps = Omit<UseMutateProps<AddCategory, unknown, void, AddCategory, void>, "path" | "verb">;

/**
 * Add new subcategories to a category
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401    
 * 
 */
export const useCategoriesV1EndpointsAddSubcategories = (props: UseCategoriesV1EndpointsAddSubcategoriesProps) => useMutate<AddCategory, unknown, void, AddCategory, void>("POST", `/iq/categories/v1/subcategories`, props);


export type CategoriesV1EndpointsUpdateSubcategoryProps = Omit<MutateProps<AddCategory, unknown, void, UpdateSubCategory, void>, "path" | "verb">;

/**
 * Edit subcategory of a category
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const CategoriesV1EndpointsUpdateSubcategory = (props: CategoriesV1EndpointsUpdateSubcategoryProps) => (
  <Mutate<AddCategory, unknown, void, UpdateSubCategory, void>
    verb="PUT"
    path={`/iq/categories/v1/subcategories`}
    
    {...props}
  />
);

export type UseCategoriesV1EndpointsUpdateSubcategoryProps = Omit<UseMutateProps<AddCategory, unknown, void, UpdateSubCategory, void>, "path" | "verb">;

/**
 * Edit subcategory of a category
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useCategoriesV1EndpointsUpdateSubcategory = (props: UseCategoriesV1EndpointsUpdateSubcategoryProps) => useMutate<AddCategory, unknown, void, UpdateSubCategory, void>("PUT", `/iq/categories/v1/subcategories`, props);


export interface CategoriesV1EndpointsDeleteSubcategoryQueryParams {
  keep_questions?: boolean;
}

export interface CategoriesV1EndpointsDeleteSubcategoryPathParams {
  category_name: string
}

export type CategoriesV1EndpointsDeleteSubcategoryProps = Omit<MutateProps<SuccessResponse, unknown, CategoriesV1EndpointsDeleteSubcategoryQueryParams, string, CategoriesV1EndpointsDeleteSubcategoryPathParams>, "path" | "verb"> & CategoriesV1EndpointsDeleteSubcategoryPathParams;

/**
 * Delete a question subcategory
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const CategoriesV1EndpointsDeleteSubcategory = ({category_name, ...props}: CategoriesV1EndpointsDeleteSubcategoryProps) => (
  <Mutate<SuccessResponse, unknown, CategoriesV1EndpointsDeleteSubcategoryQueryParams, string, CategoriesV1EndpointsDeleteSubcategoryPathParams>
    verb="DELETE"
    path={`/iq/categories/v1/${category_name}`}
    
    {...props}
  />
);

export type UseCategoriesV1EndpointsDeleteSubcategoryProps = Omit<UseMutateProps<SuccessResponse, unknown, CategoriesV1EndpointsDeleteSubcategoryQueryParams, string, CategoriesV1EndpointsDeleteSubcategoryPathParams>, "path" | "verb"> & CategoriesV1EndpointsDeleteSubcategoryPathParams;

/**
 * Delete a question subcategory
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useCategoriesV1EndpointsDeleteSubcategory = ({category_name, ...props}: UseCategoriesV1EndpointsDeleteSubcategoryProps) => useMutate<SuccessResponse, unknown, CategoriesV1EndpointsDeleteSubcategoryQueryParams, string, CategoriesV1EndpointsDeleteSubcategoryPathParams>("DELETE", (paramsInPath: CategoriesV1EndpointsDeleteSubcategoryPathParams) => `/iq/categories/v1/${paramsInPath.category_name}`, {  pathParams: { category_name }, ...props });


export type QuestionsV1EndpointsListQuestionsProps = Omit<GetProps<Questions, unknown, void, void>, "path">;

/**
 * Lists questions
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const QuestionsV1EndpointsListQuestions = (props: QuestionsV1EndpointsListQuestionsProps) => (
  <Get<Questions, unknown, void, void>
    path={`/iq/questions/v1/`}
    
    {...props}
  />
);

export type UseQuestionsV1EndpointsListQuestionsProps = Omit<UseGetProps<Questions, unknown, void, void>, "path">;

/**
 * Lists questions
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useQuestionsV1EndpointsListQuestions = (props: UseQuestionsV1EndpointsListQuestionsProps) => useGet<Questions, unknown, void, void>(`/iq/questions/v1/`, props);


export type QuestionsV1EndpointsAddQuestionProps = Omit<MutateProps<AddQuestion, unknown, void, AddQuestion, void>, "path" | "verb">;

/**
 * Add a question to a category/subcategory
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const QuestionsV1EndpointsAddQuestion = (props: QuestionsV1EndpointsAddQuestionProps) => (
  <Mutate<AddQuestion, unknown, void, AddQuestion, void>
    verb="POST"
    path={`/iq/questions/v1/`}
    
    {...props}
  />
);

export type UseQuestionsV1EndpointsAddQuestionProps = Omit<UseMutateProps<AddQuestion, unknown, void, AddQuestion, void>, "path" | "verb">;

/**
 * Add a question to a category/subcategory
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useQuestionsV1EndpointsAddQuestion = (props: UseQuestionsV1EndpointsAddQuestionProps) => useMutate<AddQuestion, unknown, void, AddQuestion, void>("POST", `/iq/questions/v1/`, props);


export type QuestionsV1EndpointsUpdateQuestionProps = Omit<MutateProps<UpdateQuestion, unknown, void, UpdateQuestion, void>, "path" | "verb">;

/**
 * Update a question
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const QuestionsV1EndpointsUpdateQuestion = (props: QuestionsV1EndpointsUpdateQuestionProps) => (
  <Mutate<UpdateQuestion, unknown, void, UpdateQuestion, void>
    verb="PUT"
    path={`/iq/questions/v1/`}
    
    {...props}
  />
);

export type UseQuestionsV1EndpointsUpdateQuestionProps = Omit<UseMutateProps<UpdateQuestion, unknown, void, UpdateQuestion, void>, "path" | "verb">;

/**
 * Update a question
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useQuestionsV1EndpointsUpdateQuestion = (props: UseQuestionsV1EndpointsUpdateQuestionProps) => useMutate<UpdateQuestion, unknown, void, UpdateQuestion, void>("PUT", `/iq/questions/v1/`, props);


export type JobsV1EndpointsGetJobsProps = Omit<GetProps<Jobs, unknown, void, void>, "path">;

/**
 * Returns a list of all jobs
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const JobsV1EndpointsGetJobs = (props: JobsV1EndpointsGetJobsProps) => (
  <Get<Jobs, unknown, void, void>
    path={`/iq/jobs/v1/`}
    
    {...props}
  />
);

export type UseJobsV1EndpointsGetJobsProps = Omit<UseGetProps<Jobs, unknown, void, void>, "path">;

/**
 * Returns a list of all jobs
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useJobsV1EndpointsGetJobs = (props: UseJobsV1EndpointsGetJobsProps) => useGet<Jobs, unknown, void, void>(`/iq/jobs/v1/`, props);


export type JobsV1EndpointsCreateProps = Omit<MutateProps<EntityIdResponse, unknown, void, Job, void>, "path" | "verb">;

/**
 * Creates a job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const JobsV1EndpointsCreate = (props: JobsV1EndpointsCreateProps) => (
  <Mutate<EntityIdResponse, unknown, void, Job, void>
    verb="POST"
    path={`/iq/jobs/v1/`}
    
    {...props}
  />
);

export type UseJobsV1EndpointsCreateProps = Omit<UseMutateProps<EntityIdResponse, unknown, void, Job, void>, "path" | "verb">;

/**
 * Creates a job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useJobsV1EndpointsCreate = (props: UseJobsV1EndpointsCreateProps) => useMutate<EntityIdResponse, unknown, void, Job, void>("POST", `/iq/jobs/v1/`, props);


export interface JobsV1EndpointsGetJobPathParams {
  job_id: string
}

export type JobsV1EndpointsGetJobProps = Omit<GetProps<Job, unknown, void, JobsV1EndpointsGetJobPathParams>, "path"> & JobsV1EndpointsGetJobPathParams;

/**
 * Get Job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const JobsV1EndpointsGetJob = ({job_id, ...props}: JobsV1EndpointsGetJobProps) => (
  <Get<Job, unknown, void, JobsV1EndpointsGetJobPathParams>
    path={`/iq/jobs/v1/${job_id}`}
    
    {...props}
  />
);

export type UseJobsV1EndpointsGetJobProps = Omit<UseGetProps<Job, unknown, void, JobsV1EndpointsGetJobPathParams>, "path"> & JobsV1EndpointsGetJobPathParams;

/**
 * Get Job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useJobsV1EndpointsGetJob = ({job_id, ...props}: UseJobsV1EndpointsGetJobProps) => useGet<Job, unknown, void, JobsV1EndpointsGetJobPathParams>((paramsInPath: JobsV1EndpointsGetJobPathParams) => `/iq/jobs/v1/${paramsInPath.job_id}`, {  pathParams: { job_id }, ...props });


export interface JobsV1EndpointsUpdatePathParams {
  job_id: string
}

export type JobsV1EndpointsUpdateProps = Omit<MutateProps<JobResponse, unknown, void, UpdateJob, JobsV1EndpointsUpdatePathParams>, "path" | "verb"> & JobsV1EndpointsUpdatePathParams;

/**
 * Update job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const JobsV1EndpointsUpdate = ({job_id, ...props}: JobsV1EndpointsUpdateProps) => (
  <Mutate<JobResponse, unknown, void, UpdateJob, JobsV1EndpointsUpdatePathParams>
    verb="PUT"
    path={`/iq/jobs/v1/${job_id}`}
    
    {...props}
  />
);

export type UseJobsV1EndpointsUpdateProps = Omit<UseMutateProps<JobResponse, unknown, void, UpdateJob, JobsV1EndpointsUpdatePathParams>, "path" | "verb"> & JobsV1EndpointsUpdatePathParams;

/**
 * Update job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 400
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useJobsV1EndpointsUpdate = ({job_id, ...props}: UseJobsV1EndpointsUpdateProps) => useMutate<JobResponse, unknown, void, UpdateJob, JobsV1EndpointsUpdatePathParams>("PUT", (paramsInPath: JobsV1EndpointsUpdatePathParams) => `/iq/jobs/v1/${paramsInPath.job_id}`, {  pathParams: { job_id }, ...props });


export type JobsV1EndpointsDeleteProps = Omit<MutateProps<EntityIdResponse, unknown, void, string, void>, "path" | "verb">;

/**
 * Delete job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const JobsV1EndpointsDelete = (props: JobsV1EndpointsDeleteProps) => (
  <Mutate<EntityIdResponse, unknown, void, string, void>
    verb="DELETE"
    path={`/iq/jobs/v1`}
    
    {...props}
  />
);

export type UseJobsV1EndpointsDeleteProps = Omit<UseMutateProps<EntityIdResponse, unknown, void, string, void>, "path" | "verb">;

/**
 * Delete job
 * 
 * 
 * Required Headers:
 * 
 *   Authorization request header
 * 
 *     Bearer Valid Token
 * 
 * Errors:
 * 
 *     not-found, 404
 *     token-invalid, 401
 *     authorization-required, 401
 * 
 */
export const useJobsV1EndpointsDelete = (props: UseJobsV1EndpointsDeleteProps) => useMutate<EntityIdResponse, unknown, void, string, void>("DELETE", `/iq/jobs/v1`, {   ...props });

